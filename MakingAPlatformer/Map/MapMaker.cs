using MakingAPlatformer.Map.Blocks;
using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;

namespace MakingAPlatformer.Map
{
    public class MapMaker
    {
        public List<IMapObject> Blocks;

        private int _mapLength = 15;
        private int _mapHeight = 25;
        private int _blockSize = 62;

        private IMapObject[,] _blockArray;
        private List<int[,]> _tileArrayList = new List<int[,]>();

        private BlockGenerator _blockGenerator;

        public MapMaker()
        {
            Blocks = new List<IMapObject>();
            _blockGenerator = new BlockGenerator();
            _blockArray = new Block[_mapLength, _mapHeight];
            _tileArrayList = new List<int[,]>
            {
                new int[,] // level 1
                {
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,8 },
                    { 0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,7 },
                    { 0,0,0,0,7,0,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,7 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0 },
                    { 7,7,7,7,7,7,0,0,7,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0 },
                    { 0,7,7,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0 },
                    { 0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,7,0,0,0,0,0,0,0 },
                    { 0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0 },
                    { 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,4,3,3 },
                },
                new int[,] // level 2
                {
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,5,9,5,0,0,5,5 },
                    { 5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0, },
                    { 5,5,0,0,0,0,0,0,0,5,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0 },
                    { 0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,5,9,5,0,0,0,5,5,0,0,0,0,5,5,5,0,0,0,5,5,6 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5 },
                    { 5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,5 },
                    { 5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,9,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,5,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,5,9,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,5,5,0,0,0,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1 },
                },
                new int[,] // victory
                {
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,1,0,0,0,1,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    { 0,1,1,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    { 0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0 },
                    { 0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0 },
                    { 0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0 },
                    { 0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                },
                new int[,] // death
                {
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,0 },
                    { 0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0 },
                    { 0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0 },
                    { 0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0 },
                    { 0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0 },
                    { 0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    { 0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0 },
                    { 0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0 },
                    { 0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,0 },
                    { 0,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0 },
                    { 0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0 },
                    { 0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1,0,0 },
                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                },
                new int[,] // start
                {
                    { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
                    { 1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1 },
                    { 1,0,0,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1 },
                    { 1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1 },
                    { 1,0,0,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1 },
                    { 1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1 },
                    { 1,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1 },
                    { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 },
                    { 1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1 },
                    { 1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1 },
                    { 1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1 },
                    { 1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1 },
                    { 1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,1,0,0,1 },
                    { 1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1 },
                    { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
                }
            };
        }

        public void CreateLevel(int level)
        {
            /* TYPES OF BLOCKS
             * 0 -> empty
             * 1 -> stone
             * 2 -> grass
             * 3 -> sand
             * 4 -> dirt
             * 5 -> stone stairs
             * 6 -> sand stairs
             * 7 -> grass trap
             * 8 -> dirt trap
             * 
             * NEW RANKING 
             * DirtBlock        1
             * DirtTrap         2
             * GrassBlock       3
             * GrassTrap        4
             * SandBlock        5
             * SandStairsBlock  6
             * StoneBlock       7
             * StoneStairsBlock 8
             * SandTrap 9
             */

            /* LEVEL IDs
             * 0 -> level1
             * 1 -> level2
             * 2 -> victory
             * 3 -> death
             * 4 -> start
             */

            for (int x = 0; x < _mapLength; x++)
            {
                for (int y = 0; y < _mapHeight; y++)
                {
                    if (_tileArrayList[level][x, y] != 0)
                    {
                        _blockArray[x, y] = _blockGenerator.GenerateBlockVariation(_tileArrayList, level, x, y, _blockSize);
                        Blocks.Add(_blockArray[x, y]);
                    }
                }
            }
        }

        public void DrawLevel(SpriteBatch spriteBatch)
        {
            for (int x = 0; x < _mapLength; x++)
            {
                for (int y = 0; y < _mapHeight; y++)
                {
                    if (_blockArray[x, y] != null) _blockArray[x, y].Draw(spriteBatch);
                }
            }
        }
    }
}
