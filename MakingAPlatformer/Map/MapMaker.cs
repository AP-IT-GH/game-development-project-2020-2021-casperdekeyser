using MakingAPlatformer.Map.Blocks;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;

namespace MakingAPlatformer.Map
{
    public class MapMaker
    {
        private int mapLength = 15;
        private int mapHeight = 25;
        private int blockSize = 62;

        private IMapObject[,] blockArray;
        private List<int[,]> tileArrayList = new List<int[,]>();

        public List<IMapObject> Blocks;
        public BlockGenerator blockgen;

        public MapMaker()
        {
            Blocks = new List<IMapObject>();
            blockgen = new BlockGenerator();
            blockArray = new Block[mapLength, mapHeight];
            tileArrayList = new List<int[,]>
            {
                new int[,] // level 1
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5 },
                    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1 },
                    {0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0 },
                    {1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0 },
                    {0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0 },
                    {0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0 },
                    {0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0 },
                    {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2 },
                },
                new int[,] // level 2
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,6 },
                    {0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,3,3,3 },
                    {0,0,0,0,3,0,0,0,0,0,0,3,3,0,0,0,0,3,3,0,0,0,0,0,3 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0 },
                    {3,3,3,3,3,3,0,0,3,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0 },
                    {0,3,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {3,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0 },
                    {3,0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,3,0,0,0,0,0,0,0 },
                    {3,0,0,0,3,3,0,0,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0 },
                    {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
                },
                new int[,] // victory
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,1,0,0,0,1,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    {0,1,1,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    {0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0 },
                    {0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0 },
                    {0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0 },
                    {0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                },
                new int[,] // death
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,0 },
                    {0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0 },
                    {0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0 },
                    {0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0 },
                    {0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0 },
                    {0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                    {0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0 },
                    {0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0 },
                    {0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,0 },
                    {0,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0 },
                    {0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0 },
                    {0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1,0,0 },
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                },
            };
        }

        public void CreateLevel(int level)
        {
            /* TYPES OF BLOCKS
             * 0 -> empty
             * 1 -> stone
             * 2 -> grass
             * 3 -> sand
             * 4 -> dirt
             * 5 -> stone stairs
             * 6 -> sand stairs
             */

            /* LEVEL IDs
             * 0 -> level1
             * 1 -> level2
             * 2 -> victory
             * 3 -> death
             */

            for (int x = 0; x < mapLength; x++)
            {
                for (int y = 0; y < mapHeight; y++)
                {
                    if (tileArrayList[level][x, y] != 0)
                    {
                        blockArray[x, y] = blockgen.GenerateBlockVariation(tileArrayList, level, x, y, blockSize);
                        Blocks.Add(blockArray[x, y]);
                    }
                }
            }
        }

        public void DrawLevel(SpriteBatch spriteBatch)
        {
            for (int x = 0; x < mapLength; x++)
            {
                for (int y = 0; y < mapHeight; y++)
                {
                    if (blockArray[x, y] != null) blockArray[x, y].Draw(spriteBatch);
                }
            }
        }
    }
}
